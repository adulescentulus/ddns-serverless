on:
  push:
    paths-ignore:
      - 'docs/*'
    branches-ignore:
      - 'wip-**'
  delete:

name: Deploy to AWS Lambda

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-20.04
    if: github.event_name == 'push'

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Make
        id: package
        run: |
          make

      - name: Define slug variables
        uses: rlespinasse/github-slug-action@v4

      - name: Set STACK_NAME
        env:
          STACK_NAME_BASE: ddns-serverless
        run: |
          echo "STACK_NAME=${STACK_NAME_BASE}-${{ env.GITHUB_REF_SLUG }}" >> $GITHUB_ENV

      - name: Deploy
        id: deploy
        env:
          S3_BUCKET: nc-projects-infrabucket
        working-directory: ./cfn
        run: |
          echo using STACK_NAME ${{ env.STACK_NAME }}
          chmod +x prepare_template.sh
          ./prepare_template.sh
          aws cloudformation package --template aws-resources.yml --s3-bucket $S3_BUCKET --s3-prefix event2calendar --output-template template-export.yml
          aws cloudformation deploy  --template-file=template-export.yml --stack-name="${{ env.STACK_NAME }}" --capabilities=CAPABILITY_NAMED_IAM --parameter-overrides ParamApiKey=${{ secrets.NETCUP_API_KEY }} ParamApiSecret=${{ secrets.NETCUP_API_SECRET }} ParamCustomer=${{ secrets.NETCUP_API_CUSTOMER }} ParamCustomDomain=${{ secrets.CUSTOM_DOMAIN }}
          export ENDPOINT=$(aws cloudformation describe-stacks --stack-name="${{ env.STACK_NAME }}" | jq -r '.Stacks | .[0] | .Outputs[] | select(.OutputKey=="LambdaEndpoint") | .OutputValue')
          echo "ENDPOINT=${ENDPOINT}" >> $GITHUB_ENV
      - name: Verify
        run: |
          echo Using endpoint ${{ env.ENDPOINT }}
  delete:
    name: Delete old stack
    runs-on: ubuntu-20.04
    if: github.event_name == 'delete' && github.event.ref_type == 'branch'

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Define slug variables
        uses: rlespinasse/github-slug-action@v4

      - name: Set STACK_NAME
        env:
          STACK_NAME_BASE: ddns-serverless
        run: |
          echo "STACK_NAME=${STACK_NAME_BASE}-${{ env.GITHUB_REF_SLUG }}" >> $GITHUB_ENV

      - name: cleanup AWS
        run: |
          echo using STACK_NAME ${{ env.STACK_NAME }}
          aws cloudformation delete-stack --stack-name="${{ env.STACK_NAME }}"

